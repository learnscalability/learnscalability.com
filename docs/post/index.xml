<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Learn Scalability</title>
    <link>http://learnscalability.com/post/index.xml</link>
    <description>Recent content in Posts on Learn Scalability</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Mar 2017 07:13:09 +0000</lastBuildDate>
    <atom:link href="http://learnscalability.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RPC</title>
      <link>http://learnscalability.com/post/rcp/</link>
      <pubDate>Wed, 08 Mar 2017 07:13:09 +0000</pubDate>
      
      <guid>http://learnscalability.com/post/rcp/</guid>
      <description>

&lt;h1 id=&#34;communication&#34;&gt;Communication&lt;/h1&gt;

&lt;p&gt;Communication is a core concept in distributed systems. It&amp;rsquo;s simultaneously the source of the power and allure and the reason for most of the problems.&lt;/p&gt;

&lt;p&gt;Having good primitives for communication is essential to all distributed algorithms.&lt;/p&gt;

&lt;p&gt;There are multiple strategies for information exchange between nodes in a system, and they all sit at different layers of abstraction.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;direct one-to-one communication through TCP or datagrams, or, on a higher level of abstraction, HTTP REST APIs, RPC, etc.&lt;/li&gt;
&lt;li&gt;message-oriented communication, where nodes communicate by sending a message to an underlying middleware which takes care of forwarding them to their recipient.&lt;/li&gt;
&lt;li&gt;epidemic protocols where information spreads to random nodes at each step.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-network-problems&#34;&gt;Types of Network Problems&lt;/h2&gt;

&lt;p&gt;Networks inside the data center can be considered homogeneous, but outside the data center, they are definitely not.&lt;/p&gt;

&lt;p&gt;This means some paths are faster, more reliable than others and they certainly are out of our control.&lt;/p&gt;

&lt;p&gt;Since the client applications are part of the system we build and are usually outside of the data center, these issues have to be dealt with.&lt;/p&gt;

&lt;p&gt;IP-based networks are also fully asynchronous, there is no way to control message latency or enforce ordering of messages.&lt;/p&gt;

&lt;p&gt;Asynchronicity implies that messages can be duplicated, delayed, dropped or even reordered.&lt;/p&gt;

&lt;p&gt;Of course, in practice, this happens very rarely, but it does occur which means this behavior has to be taken into account.&lt;/p&gt;

&lt;p&gt;One example is that reading your writes from a remote server is not guaranteed by the network so you have to add extra mechanisms to all your transactions to ensure that. (ie. TCP)&lt;/p&gt;

&lt;p&gt;All these networking issues lead to the following problem: from the perspective of any node, if any another node is not responding to message, three things can happen and there is no way to distinguish between them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the other node is down&lt;/li&gt;
&lt;li&gt;the connection is broken&lt;/li&gt;
&lt;li&gt;the connection is very slow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When designing distributed systems, where nodes do work in a coordinated fashion, the above problem is very serious and has to be taken into account in the design process.&lt;/p&gt;

&lt;h2 id=&#34;how-rpc-works&#34;&gt;How RPC Works&lt;/h2&gt;

&lt;p&gt;RPC stands for &lt;code&gt;remote procedure call&lt;/code&gt;. It is an application layer protocol that, while it doesn&amp;rsquo;t solve the problems discussed earlier, aims to abstract away the network transport and to be as efficient as possible.&lt;/p&gt;

&lt;p&gt;It is operation oriented, which means each node exposes a set of method or actions; clients connect to the node, pick an operation, supply the required params and wait for the response.&lt;/p&gt;

&lt;p&gt;A different approach is resource orientation, where nodes expose an unbounded set of resources, but the available operations they allow on those resources is limited. One example of this is REST-ful APIs!&lt;/p&gt;

&lt;p&gt;RPC protocols are usually coupled with an interface definition language (or IDL). This is a language-agnostic DSL used to define data types and operations supported by nodes.
In return code generation tools transform the IDL files into a language-specific code for both the client and the server of the RPC. It is a toolkit for defining application level protocols.
This way all the network intricacies, the underlying transport, the message serialization and deserialization, request retries, etc. are all abstracted away.&lt;/p&gt;

&lt;p&gt;There are several types or RPC in use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;synchronous RPC, where the client waits for the reply from the server before proceeding.&lt;/li&gt;
&lt;li&gt;asynchronous RPC, where the server will return an empty reply to the client immediately then continue processing the request. This implies that the client is not interested in the response or that it has other means of obtaining it.&lt;/li&gt;
&lt;li&gt;multicast RPC, here the client makes requests to multiple servers aggregating the responses.&lt;/li&gt;
&lt;li&gt;streaming RPC, the client reuses the same connection to send multiple requests in parallel or serial to the same server. The client will process responses as they arrive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;grpc-challenge&#34;&gt;gRPC Challenge&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.grpc.io/&#34;&gt;gRPC&lt;/a&gt; is an RPC protocol which uses &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt; as an IDL and HTTP/2 as a transport.
It offers bi-directional streaming RPC, which means each peer can act as both server and client and requests are processed on the same underlying HTTP/2 connection.&lt;/p&gt;

&lt;p&gt;The challenge for this article is to write an echo-server implementation using gRPC.
There are two types of messages that need to be defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;Ping&lt;/code&gt; message is used for requests and MUST contain a string message.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Pong&lt;/code&gt; message is used in the server replies and MUST contain a string message (the same as the one received in the ping) and a Unix timestamp (time at which the server received the ping)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The server MUST expose these two operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;Send&lt;/code&gt; operation where the client sends a &lt;code&gt;Ping&lt;/code&gt; message and the server replies with a &lt;code&gt;Pong&lt;/code&gt; message that contains the same data as the request plus a timestamp.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Subscribe&lt;/code&gt; operation, the server will expect a &lt;code&gt;Ping&lt;/code&gt; message and send back &lt;code&gt;Pong&lt;/code&gt; messages once every second until the client terminates the connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implement a CLI client for this server to facilitate sending messages to the client.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./client --message=send --content=&amp;quot;Hello There!&amp;quot; --server=&amp;quot;0.0.0.0:3000&amp;quot;
$ Received `Hello There` at `1490336340`

$ ./client --message=subscribe --content=&amp;quot;Hello Again!&amp;quot; --server=&amp;quot;0.0.0.0:3000&amp;quot;
$ Replying `Hello There` at `1490336340`
$ Replying `Hello There` at `1490336341`
$ Replying `Hello There` at `1490336342`
$ Replying `Hello There` at `1490336343`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a reference implementation in golang, check out the &lt;a href=&#34;https://github.com/learnscalability/grpc-echo-service&#34;&gt;github.com/learnscalability/gprc-echo-service&lt;/a&gt; repo.
However, try to build your own implementation and only use the one offered here as a guide.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Why choose RPC when you can use REST APIs for you distributed systems?
Both technologies live at a different layer of abstraction. &lt;a href=&#34;http://json-rpc.org/&#34;&gt;JSON-RPC&lt;/a&gt; is an RPC protocol where the transport is HTTP, the encoding is JSON and it works very much like other REST APIs.
Sitting on a higher level of abstraction, RPC offers more benefits and has more opportunity for optimization, but both solutions are valid.&lt;/p&gt;

&lt;p&gt;A word of caution about treating RPCs the same way as calls to local objects!
As described in detail in this &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628&#34;&gt;paper&lt;/a&gt; this should be avoided.
RPCs have dramatically different performance characteristics and failure modes. While they formally look very simple, there is a lot of complexity hidden behind the intuitive API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Motivation</title>
      <link>http://learnscalability.com/post/motivation/</link>
      <pubDate>Sun, 05 Mar 2017 08:18:27 +0000</pubDate>
      
      <guid>http://learnscalability.com/post/motivation/</guid>
      <description>

&lt;p&gt;&lt;code&gt;learnscalability.com&lt;/code&gt; is a project that presents topics on distributed systems. The focus is on patterns, algorithms and tools that are the building blocks of modern scalable systems.&lt;/p&gt;

&lt;p&gt;Along with that, there will be reviews of relevant research papers, analyses of existing open-source systems and solutions to design exercises.&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;When designing scalable systems, the usual approach is to pick open source components that cover as much as possible of the specification. Then engineers write the code that glues these components together.&lt;/p&gt;

&lt;p&gt;The goal, on the one hand, is to minimize the amount of code written in-house because it has the potential of being buggy and insecure. On the other hand, the third-party systems chosen need to be small in focus, well written, efficient, robust and secure in production.&lt;/p&gt;

&lt;p&gt;Because of this optimization challenge, picking off-the-shelf components needs to be coupled with a good understanding of how they work at a lower level of abstraction.&lt;/p&gt;

&lt;p&gt;The goal of this project is to decompose some of these solutions and distill the core ideas that power them. Armed with this knowledge, engineers are in a better position to decide whether to build or download.&lt;/p&gt;

&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;

&lt;p&gt;There is a lot of excellent theoretical content online. This project is based on that strong foundation.&lt;/p&gt;

&lt;p&gt;However, often the practical aspects are hidden in assignments, quizzes and exercises. We aim to cover these aspects in this project; to implement and test systems so we can better understand them.&lt;/p&gt;

&lt;p&gt;This project will focus on real-life scenarios. Some theoretical environments that assume machines don&amp;rsquo;t fail or that networks are reliable are out of scope. The current pervasive platform for running distributed systems is public, multi-tenant, non-standardized cloud environments; all content on this site will take this into consideration.&lt;/p&gt;

&lt;p&gt;Each topic discussed will cover:
* a technical specification of the problem at hand, as close as possible to a real use-case.
* a runnable implementation written in open-source &lt;a href=&#34;http://alexandrutopliceanu.ro/post/quality-go-code/&#34;&gt;high-quality Golang code&lt;/a&gt;
* a theoretical motivation of the technical decisions made in the implementation.
* production-quality alternatives and their design decisions.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While open source communities are excellent at exploring the solution space of a given problem, at producing battle-tested implementations and beautiful documentation, they tend to rush through the theoretical foundations behind the design decisions in their projects.&lt;/p&gt;

&lt;p&gt;This project hopes to convince communities of the value of spending the extra effort to cover the core ideas in an accessible way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>